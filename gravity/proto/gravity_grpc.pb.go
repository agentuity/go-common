// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: gravity.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GravityControl_Provision_FullMethodName             = "/gravity.GravityControl/Provision"
	GravityControl_GetDeploymentMetadata_FullMethodName = "/gravity.GravityControl/GetDeploymentMetadata"
)

// GravityControlClient is the client API for GravityControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GravityControl service handles client provisioning and metadata
type GravityControlClient interface {
	// provision is called on startup to get certificates and configuration
	Provision(ctx context.Context, in *ProvisionRequest, opts ...grpc.CallOption) (*ProvisionResponse, error)
	// get deployment metadata for provisioning
	GetDeploymentMetadata(ctx context.Context, in *DeploymentMetadataRequest, opts ...grpc.CallOption) (*DeploymentMetadataResponse, error)
}

type gravityControlClient struct {
	cc grpc.ClientConnInterface
}

func NewGravityControlClient(cc grpc.ClientConnInterface) GravityControlClient {
	return &gravityControlClient{cc}
}

func (c *gravityControlClient) Provision(ctx context.Context, in *ProvisionRequest, opts ...grpc.CallOption) (*ProvisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvisionResponse)
	err := c.cc.Invoke(ctx, GravityControl_Provision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gravityControlClient) GetDeploymentMetadata(ctx context.Context, in *DeploymentMetadataRequest, opts ...grpc.CallOption) (*DeploymentMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeploymentMetadataResponse)
	err := c.cc.Invoke(ctx, GravityControl_GetDeploymentMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GravityControlServer is the server API for GravityControl service.
// All implementations must embed UnimplementedGravityControlServer
// for forward compatibility.
//
// GravityControl service handles client provisioning and metadata
type GravityControlServer interface {
	// provision is called on startup to get certificates and configuration
	Provision(context.Context, *ProvisionRequest) (*ProvisionResponse, error)
	// get deployment metadata for provisioning
	GetDeploymentMetadata(context.Context, *DeploymentMetadataRequest) (*DeploymentMetadataResponse, error)
	mustEmbedUnimplementedGravityControlServer()
}

// UnimplementedGravityControlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGravityControlServer struct{}

func (UnimplementedGravityControlServer) Provision(context.Context, *ProvisionRequest) (*ProvisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Provision not implemented")
}
func (UnimplementedGravityControlServer) GetDeploymentMetadata(context.Context, *DeploymentMetadataRequest) (*DeploymentMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentMetadata not implemented")
}
func (UnimplementedGravityControlServer) mustEmbedUnimplementedGravityControlServer() {}
func (UnimplementedGravityControlServer) testEmbeddedByValue()                        {}

// UnsafeGravityControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GravityControlServer will
// result in compilation errors.
type UnsafeGravityControlServer interface {
	mustEmbedUnimplementedGravityControlServer()
}

func RegisterGravityControlServer(s grpc.ServiceRegistrar, srv GravityControlServer) {
	// If the following call pancis, it indicates UnimplementedGravityControlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GravityControl_ServiceDesc, srv)
}

func _GravityControl_Provision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravityControlServer).Provision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GravityControl_Provision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravityControlServer).Provision(ctx, req.(*ProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GravityControl_GetDeploymentMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravityControlServer).GetDeploymentMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GravityControl_GetDeploymentMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravityControlServer).GetDeploymentMetadata(ctx, req.(*DeploymentMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GravityControl_ServiceDesc is the grpc.ServiceDesc for GravityControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GravityControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gravity.GravityControl",
	HandlerType: (*GravityControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Provision",
			Handler:    _GravityControl_Provision_Handler,
		},
		{
			MethodName: "GetDeploymentMetadata",
			Handler:    _GravityControl_GetDeploymentMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravity.proto",
}

const (
	GravityTunnel_EstablishTunnel_FullMethodName = "/gravity.GravityTunnel/EstablishTunnel"
	GravityTunnel_StreamPackets_FullMethodName   = "/gravity.GravityTunnel/StreamPackets"
)

// GravityTunnelClient is the client API for GravityTunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GravityTunnel service handles bidirectional streaming for packet data and
// control messages
type GravityTunnelClient interface {
	// establish a tunnel for the client to send and receive control messages
	// after it has been provisioned
	EstablishTunnel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ControlMessage, ControlMessage], error)
	// stream packet data with multiplexing
	StreamPackets(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TunnelPacket, TunnelPacket], error)
}

type gravityTunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewGravityTunnelClient(cc grpc.ClientConnInterface) GravityTunnelClient {
	return &gravityTunnelClient{cc}
}

func (c *gravityTunnelClient) EstablishTunnel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ControlMessage, ControlMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GravityTunnel_ServiceDesc.Streams[0], GravityTunnel_EstablishTunnel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ControlMessage, ControlMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GravityTunnel_EstablishTunnelClient = grpc.BidiStreamingClient[ControlMessage, ControlMessage]

func (c *gravityTunnelClient) StreamPackets(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TunnelPacket, TunnelPacket], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GravityTunnel_ServiceDesc.Streams[1], GravityTunnel_StreamPackets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TunnelPacket, TunnelPacket]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GravityTunnel_StreamPacketsClient = grpc.BidiStreamingClient[TunnelPacket, TunnelPacket]

// GravityTunnelServer is the server API for GravityTunnel service.
// All implementations must embed UnimplementedGravityTunnelServer
// for forward compatibility.
//
// GravityTunnel service handles bidirectional streaming for packet data and
// control messages
type GravityTunnelServer interface {
	// establish a tunnel for the client to send and receive control messages
	// after it has been provisioned
	EstablishTunnel(grpc.BidiStreamingServer[ControlMessage, ControlMessage]) error
	// stream packet data with multiplexing
	StreamPackets(grpc.BidiStreamingServer[TunnelPacket, TunnelPacket]) error
	mustEmbedUnimplementedGravityTunnelServer()
}

// UnimplementedGravityTunnelServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGravityTunnelServer struct{}

func (UnimplementedGravityTunnelServer) EstablishTunnel(grpc.BidiStreamingServer[ControlMessage, ControlMessage]) error {
	return status.Errorf(codes.Unimplemented, "method EstablishTunnel not implemented")
}
func (UnimplementedGravityTunnelServer) StreamPackets(grpc.BidiStreamingServer[TunnelPacket, TunnelPacket]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPackets not implemented")
}
func (UnimplementedGravityTunnelServer) mustEmbedUnimplementedGravityTunnelServer() {}
func (UnimplementedGravityTunnelServer) testEmbeddedByValue()                       {}

// UnsafeGravityTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GravityTunnelServer will
// result in compilation errors.
type UnsafeGravityTunnelServer interface {
	mustEmbedUnimplementedGravityTunnelServer()
}

func RegisterGravityTunnelServer(s grpc.ServiceRegistrar, srv GravityTunnelServer) {
	// If the following call pancis, it indicates UnimplementedGravityTunnelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GravityTunnel_ServiceDesc, srv)
}

func _GravityTunnel_EstablishTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GravityTunnelServer).EstablishTunnel(&grpc.GenericServerStream[ControlMessage, ControlMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GravityTunnel_EstablishTunnelServer = grpc.BidiStreamingServer[ControlMessage, ControlMessage]

func _GravityTunnel_StreamPackets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GravityTunnelServer).StreamPackets(&grpc.GenericServerStream[TunnelPacket, TunnelPacket]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GravityTunnel_StreamPacketsServer = grpc.BidiStreamingServer[TunnelPacket, TunnelPacket]

// GravityTunnel_ServiceDesc is the grpc.ServiceDesc for GravityTunnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GravityTunnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gravity.GravityTunnel",
	HandlerType: (*GravityTunnelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EstablishTunnel",
			Handler:       _GravityTunnel_EstablishTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamPackets",
			Handler:       _GravityTunnel_StreamPackets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gravity.proto",
}
