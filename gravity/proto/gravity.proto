syntax = "proto3";

package gravity;

option go_package = "github.com/agentuity/go-common/gravity/proto";

import "google/protobuf/timestamp.proto";

// GravityControl service handles machine provisioning and metadata
service GravityControl {
  // provision a new machine is called on startup of a new machine from a public
  // image to get the certificates and configuration
  rpc ProvisionMachine(ProvisionMachineRequest)
      returns (ProvisionMachineResponse);
  // get deployment metadata for provisioning
  rpc GetDeploymentMetadata(DeploymentMetadataRequest)
      returns (DeploymentMetadataResponse);
}

// GravityTunnel service handles bidirectional streaming for packet data and control messages
service GravityTunnel {
  // establish a tunnel for the machine to send and receive control messages
  // after it has been provisioned
  rpc EstablishTunnel(stream ControlMessage) returns (stream ControlMessage);
  // stream packet data with multiplexing
  rpc StreamPackets(stream TunnelPacket) returns (stream TunnelPacket);
}

message ProvisionMachineRequest {
  string region = 1;            // the region for the machine
  string availability_zone = 2; // the availability zone for the machine
  string provider = 3;          // the provider for the machine
  string instance_id = 4;       // the unique machine id for the server
  string private_ipv4 = 5;      // the ip v4 address to use for the server
  string public_key = 6;        // the public key to use for the server
  string hostname = 7;          // the hostname of the server
  string error_message = 8;     // the error message if the machine has an error
                                // during boot or provisioning
  bool ephemeral = 9;           // if the machine is ephemeral
}

message ProvisionMachineResponse {
  bytes ca_certificate =
      1; // the CA certificate to trust for self-signed server certificates
  bytes certificate = 2; // the cert to use for the server
  bytes private_key = 3; // the key to use for the server
  google.protobuf.Timestamp expires =
      4; // the expiration time of the certificates
  string machine_token =
      5;                 // the machine token to use for communication with APIs
  string org_id = 6;     // the organization id for the machine
  string cluster_id = 7; // the cluster id for the machine
  bytes deployment_private_key =
      8; // the sourcecode private key for the organization, usually nil unless
         // Agentuity, Inc.
}

// ControlMessage represents all control plane communications
message ControlMessage {
  string id = 1;
  string stream_id = 2; // Logical stream identifier for multiplexing

  oneof message_type {
    // Connection lifecycle (10-19)
    ConnectRequest connect = 10;
    ConnectResponse connect_response = 11;
    CloseRequest close = 15;

    // Deployment management (20-29)
    RouteDeploymentRequest route_deployment = 22;
    RouteDeploymentResponse route_deployment_response = 23;
    UnprovisionRequest unprovision = 25;

    // Health and monitoring (30-39)
    PingRequest ping = 30;
    PongResponse pong = 31;
    ReportRequest report = 32;
    ActivityRequest activity = 33;

    // Session control (40-49)
    PauseRequest pause = 40;
    ResumeRequest resume = 41;

    // Configuration management (45-49)
    ConfigurationUpdate config_update = 45;
    ConfigurationUpdateResponse config_update_response = 46;

    // Generic protocol messages (50-59)
    ProtocolResponse response = 50;
    ProtocolEvent event = 51;
  }
}

// TunnelPacket represents network packet data for the tunnel
message TunnelPacket {
  bytes data = 1;       // Raw IP packet data
  string stream_id = 2; // Logical stream identifier for multiplexing
}

// Connect request from client to Gravity
message ConnectRequest {
  int32 protocol_version = 1; // Protocol version number for compatibility
  string client_version = 2;  // Version string of the client (e.g., SHA, semver)
  string client_name = 3;     // Name of the client application (e.g., "hadron")
  repeated ExistingDeployment deployments =
      4;                  // List of existing deployments to restore
  HostInfo host_info = 5; // Information about the host system
}

// Connect response from Gravity to Hadron
message ConnectResponse {
  string otlp_url = 1;             // OpenTelemetry endpoint URL for metrics
  string api_url = 3;              // Base URL for API operations
  repeated string environment = 4; // Environment variables to set
  repeated HostMapping host_mapping = 5; // Host to IP address mappings
  repeated string subnet_routes = 6;
  string gravity_server = 7; // the gravity server that we're connected to
}

message RouteDeploymentRequest {
  string deployment_id = 1; // Unique identifier for the deployment
  string hostname = 2;      // Hostname for the deployment
  string virtual_ip = 3;    // Hadron virtual IP for the deployment
}

message RouteDeploymentResponse { string ip = 1; }

// Unprovision request
message UnprovisionRequest {
  string deployment_id = 1; // Unique identifier of deployment to remove
}

// Report request for metrics
message ReportRequest {
  ServerMetrics metrics =
      1; // Comprehensive server metrics and performance data
}

// Activity request for HTTP event tracking
message ActivityRequest {
  repeated HTTPEvent events = 1; // Batch of HTTP request/response event details
}

// Ping request for health checking
message PingRequest { google.protobuf.Timestamp timestamp = 1; }

// Pong response
message PongResponse { google.protobuf.Timestamp timestamp = 1; }

// Close request
message CloseRequest {
  string reason = 1; // Reason for closing the connection
}

// Pause request
message PauseRequest {
  string reason = 1; // Reason for pausing the session
}

// Resume request
message ResumeRequest {
  string reason = 1; // Reason for resuming the session
}

// Generic protocol response
message ProtocolResponse {
  string id = 1;     // Unique identifier for the response
  string event = 2;  // Event type this response is for
  bool success = 3;  // Whether the operation was successful
  string error = 4;  // Error message if operation failed
  bytes payload = 5; // Optional response payload data
}

// Generic protocol event (server-initiated)
message ProtocolEvent {
  string id = 1;     // Unique identifier for the event
  string event = 2;  // Event type being sent
  bytes payload = 3; // Event payload data
}

// Configuration update from server to client
message ConfigurationUpdate {
  string id = 1;                  // Unique identifier for tracking this update
  repeated ConfigItem config = 2; // List of configuration items to set
}

// Configuration update response from client to server
message ConfigurationUpdateResponse {
  string id = 1;    // Identifier matching the ConfigurationUpdate
  bool success = 2; // Whether the configuration was successful
  string error = 3; // Error message if configuration failed
}

// Supporting data structures
message HostInfo {
  uint64 started = 1;      // epoch time in milliseconds since server started
  uint32 cpu = 2;          // number of CPUs
  uint64 memory = 3;       // memory in bytes
  uint64 disk = 4;         // disk space in bytes
  string ipv4_address = 5; // IPv4 address
  string ipv6_address = 6; // IPv6 address
  string hostname = 7;     // hostname
  string instance_id = 8;  // instance id of the machine
}

message ExistingDeployment {
  string id = 1;                         // Unique identifier for the deployment
  DeploymentSpec spec = 2;               // Original deployment specification
  google.protobuf.Timestamp started = 3; // When the deployment was started
  string ipv6_address = 4; // Assigned IPv6 address for the deployment
}

message DeploymentSpec {
  string id = 1; // id of the deployment
  string org_id = 2;
  string image = 3;                     // Container image to deploy
  repeated string env = 4;              // Environment variables
  repeated string secrets = 5;          // Secret names to inject
  ResourceRequirements resources = 6;   // CPU and memory requirements
  DeploymentCert organization_cert = 7; // Organization certificates
  bool skip_private_key = 8; // Skip the private key for the deployment
}

message PortMapping {
  int32 container_port = 1; // Port number inside the container
  int32 host_port = 2;      // Port number on the host (0 for auto-assign)
  string protocol = 3;      // Protocol: TCP or UDP
}

message VolumeMount {
  string host_path = 1;      // Path on the host filesystem
  string container_path = 2; // Path inside the container
  bool read_only = 3;        // Whether the mount is read-only
}

message ResourceRequirements {
  int64 memory_limit = 1;   // Maximum memory in bytes
  int64 cpu_limit = 2;      // Maximum CPU in millicores (1000 = 1 core)
  int64 memory_request = 3; // Requested memory in bytes
  int64 cpu_request = 4;    // Requested CPU in millicores
}

message DeploymentCert {
  string cert = 1;    // TLS certificate in PEM format
  string key = 2;     // TLS private key in PEM format
  string ca = 3;      // Certificate Authority certificate
  string dnsname = 4; // DNS name for the certificate
}

message CodeMetadata {
  repeated string env = 1;     // Environment variable names
  repeated string secrets = 2; // Secret names required by the code
}

message Resource {
  string id = 1;                         // Unique resource identifier
  string status = 2;                     // Current status of the resource
  string ipv6_address = 3;               // Assigned IPv6 address
  repeated PortMapping ports = 4;        // Actual port mappings assigned
  google.protobuf.Timestamp created = 5; // When the resource was created
}

message HostMapping {
  string hostname = 1;   // Hostname to map
  string ip_address = 2; // IP address to map the hostname to
}

message HTTPEvent {
  string method = 1;        // HTTP method (GET, POST, etc.)
  string path = 2;          // Request path
  int32 status = 3;         // HTTP status code
  int64 started = 4;        // Request start time (epoch milliseconds)
  int64 duration = 5;       // Request duration in milliseconds
  string deployment_id = 6; // ID of the deployment handling the request
  string session_id = 7;    // Session ID for this request
  string agent_id = 8;      // Agent identifier
  string machine_id = 9;    // Machine identifier
  string project_id = 10;   // Project identifier
  string org_id = 11;       // Organization identifier
  int64 cpu_units = 12;     // CPU units consumed
  int64 memory_units = 13;  // Memory units consumed
  int64 disk_units = 14;    // Disk units consumed
}

message SessionInfo {
  string id = 1;         // Unique session identifier
  string machine_id = 2; // Machine identifier for this session
  google.protobuf.Timestamp connected = 3; // When the session was established
  bool authenticated = 4;          // Whether the session is authenticated
  repeated string deployments = 5; // List of deployment IDs in this session
}

// Enhanced ServerMetrics with comprehensive performance and health data
message ServerMetrics {
  // Basic server metrics (1-10)
  int64 start_time = 1;        // epoch milliseconds
  uint64 uptime = 2;           // milliseconds since start
  int64 connected_time = 3;    // epoch milliseconds (optional)
  int64 last_message_time = 4; // epoch milliseconds (optional)

  // Connection metrics (11-20)
  bool is_connected = 11;
  int64 reconnect_count = 12;
  int64 total_connections = 13;

  // Component metrics (21-40)
  GRPCConnectionMetrics grpc_metrics = 21;
  PerformanceMetrics performance = 22;
  MessageStatistics message_stats = 23;
  SystemResourceMetrics system_metrics = 24;

  // Historical data (41-50)
  HistoricalMetrics historical_data = 41;
}

// GRPCConnectionMetrics contains gRPC-specific connection metrics
message GRPCConnectionMetrics {
  // Connection pool information (1-10)
  int32 pool_size = 1;
  int32 active_connections = 2;
  int32 idle_connections = 3;
  int32 failed_connections = 4;
  repeated string connection_states = 5;

  // Stream information (11-20)
  int32 total_streams = 11;
  int32 control_streams = 12;
  int32 tunnel_streams = 13;
  int32 healthy_streams = 14;
  int32 active_streams = 15;
  string stream_allocation = 16; // allocation strategy

  // Protocol information (21-30)
  string protocol_version = 21;
  bool compression_enabled = 22;
  string tls_version = 23;

  // Health monitoring (31-40)
  int64 last_health_check = 31;        // epoch milliseconds
  int64 health_check_interval_ns = 32; // nanoseconds
  repeated string unhealthy_streams = 33;
}

// PerformanceMetrics contains performance data from MetricsCollector
message PerformanceMetrics {
  // Latency metrics (1-10) - all in nanoseconds
  int64 avg_packet_latency_ns = 1;
  int64 p95_packet_latency_ns = 2;
  int64 p99_packet_latency_ns = 3;
  int64 max_packet_latency_ns = 4;
  int64 avg_control_latency_ns = 5;
  int64 p95_control_latency_ns = 6;

  // Throughput metrics (11-20)
  double packets_per_second = 11;
  double bytes_per_second = 12;
  double control_messages_per_sec = 13;

  // Error metrics (21-30)
  double error_rate = 21; // percentage
  int64 packet_drops = 22;
  int64 stream_errors = 23;
  int64 connection_errors = 24;

  // Stream health (31-40)
  int64 healthy_streams = 31;
  int64 total_streams = 32;
  int64 active_connections = 33;
  int64 unhealthy_streams = 34;
  double stream_utilization = 35; // percentage

  // Circuit breaker metrics (41-50)
  repeated string circuit_breaker_states = 41;
  int64 total_circuit_breaks = 42;
  int64 avg_recovery_time_ns = 43;

  // Compression metrics (51-60)
  double compression_ratio = 51; // percentage
  int64 bytes_saved = 52;
  int64 compression_time_ns = 53;
  int64 decompression_time_ns = 54;

  // Retry metrics (61-70)
  int64 total_retry_attempts = 61;
  int64 successful_retries = 62;
  int64 failed_retries = 63;
  double retry_success_rate = 64; // percentage

  // Connection pool metrics (71-80)
  double pool_utilization = 71; // percentage
  int64 idle_connections = 72;
  int64 connection_resets = 73;

  // Resource utilization (81-90)
  int64 memory_usage_bytes = 81;
  int64 buffer_pool_size = 82;
  int64 buffer_pool_hits = 83;
  int64 buffer_pool_misses = 84;

  // Metadata and timing (91-100)
  int64 last_updated = 91;           // epoch milliseconds
  int64 collection_interval_ns = 92; // nanoseconds

  // Container metrics (101-110)
  map<string, DockerContainerStats> docker_stats = 101;
}

// MessageStatistics contains detailed message flow statistics
message MessageStatistics {
  // Packet statistics (1-10)
  int64 packets_sent = 1;
  int64 packets_received = 2;
  int64 packets_dropped = 3;
  int64 packet_bytes = 4;
  double avg_packet_size = 5; // bytes

  // Control message statistics (11-20)
  int64 control_messages_sent = 11;
  int64 control_messages_received = 12;
  int64 control_message_bytes = 13;

  // Message breakdown (21-30)
  map<string, int64> messages_by_type = 21;

  // Throughput metrics (31-40)
  double packets_per_second = 31;
  double bytes_per_second = 32;

  // Quality metrics (41-50)
  double packet_loss_rate = 41;      // percentage
  double message_delivery_rate = 42; // percentage
}

// SystemResourceMetrics contains system resource utilization
message SystemResourceMetrics {
  // Memory metrics (1-10)
  int64 memory_usage_bytes = 1;
  double memory_usage_mb = 2;
  int64 allocated_memory = 3;
  int64 gc_pause_time_ns = 4;
  int32 num_goroutines = 5;

  // CPU metrics (11-20)
  double cpu_usage_percent = 11;

  // Buffer pool metrics (21-30)
  int64 buffer_pool_size = 21;
  int64 buffer_pool_hits = 22;
  int64 buffer_pool_misses = 23;
  double buffer_pool_hit_rate = 24; // percentage

  // File descriptor metrics (31-40)
  int32 open_file_descriptors = 31;
}

// HistoricalMetrics contains time-series data for trend analysis
message HistoricalMetrics {
  // Recent throughput samples (last 60 samples, 1 per minute)
  repeated ThroughputSample throughput_history = 1;

  // Recent latency samples
  repeated LatencySample latency_history = 2;

  // Error rate samples
  repeated ErrorRateSample error_rate_history = 3;

  // Connection health samples
  repeated HealthSample health_history = 4;

  // Maximum history length
  int32 max_history_length = 5;
}

// ThroughputSample represents a throughput measurement at a point in time
message ThroughputSample {
  int64 timestamp = 1; // epoch milliseconds
  double packets_per_sec = 2;
  double bytes_per_sec = 3;
  double messages_per_sec = 4;
}

// LatencySample represents latency measurements at a point in time
message LatencySample {
  int64 timestamp = 1; // epoch milliseconds
  int64 avg_latency_ns = 2;
  int64 p95_latency_ns = 3;
  int64 p99_latency_ns = 4;
  int64 max_latency_ns = 5;
}

// ErrorRateSample represents error rate at a point in time
message ErrorRateSample {
  int64 timestamp = 1;   // epoch milliseconds
  double error_rate = 2; // percentage
  int64 total_errors = 3;
}

// HealthSample represents system health at a point in time
message HealthSample {
  int64 timestamp = 1; // epoch milliseconds
  int32 healthy_streams = 2;
  int32 total_streams = 3;
  int32 active_connections = 4;
  double health_score = 5; // percentage
}

// DockerContainerStats contains real-time Docker container statistics
message DockerContainerStats {
  // Container identity (1-10)
  string container_id = 1;
  string container_name = 2;
  string image = 3;
  string deployment_id = 4;

  // Container state (11-20)
  string status = 11;
  bool paused = 12;
  int64 paused_time = 13;  // epoch milliseconds, 0 if not paused
  int64 started_time = 14; // epoch milliseconds
  int64 restart_count = 15;

  // CPU metrics (21-30)
  double cpu_usage_percent = 21;
  uint64 cpu_usage_total_ns = 22;
  uint64 cpu_usage_kernel_ns = 23;
  uint64 cpu_usage_user_ns = 24;
  uint64 cpu_throttled_periods = 25;
  uint64 cpu_throttled_time_ns = 26;
  double cpu_limit = 27;

  // Memory metrics (31-40)
  uint64 memory_usage_bytes = 31;
  uint64 memory_limit_bytes = 32;
  double memory_usage_percent = 33;
  uint64 memory_max_usage_bytes = 34;
  uint64 memory_cache_bytes = 35;
  uint64 memory_rss_bytes = 36;
  uint64 memory_swap_bytes = 37;
  uint64 memory_swap_limit_bytes = 38;
  uint64 oom_kills = 39;

  // Network metrics (41-50)
  uint64 network_rx_bytes = 41;
  uint64 network_tx_bytes = 42;
  uint64 network_rx_packets = 43;
  uint64 network_tx_packets = 44;
  uint64 network_rx_errors = 45;
  uint64 network_tx_errors = 46;
  uint64 network_rx_dropped = 47;
  uint64 network_tx_dropped = 48;

  // Disk I/O metrics (51-60)
  uint64 block_io_read_bytes = 51;
  uint64 block_io_write_bytes = 52;
  uint64 block_io_read_ops = 53;
  uint64 block_io_write_ops = 54;

  // Process metrics (61-70)
  uint64 pids_current = 61;
  uint64 pids_limit = 62;

  // Network interface information (71-80)
  string ipv4_address = 71;
  string ipv6_address = 72;
  string hostname = 73;

  // Runtime metrics (81-90)
  int64 inflight_requests = 81;

  // Health and timing (91-100)
  bool healthy = 91;
  int64 last_updated = 92; // epoch milliseconds
}

message ConfigItem {
  string key = 1;   // Configuration key name
  string value = 2; // Configuration value
}

// Deployment metadata request
message DeploymentMetadataRequest {
  string deployment_id = 1; // Unique identifier for the deployment
  string org_id = 2;        // Organization identifier
}

// Deployment metadata response
message DeploymentMetadataResponse {
  bool success = 1;                   // Whether the request was successful
  string error = 2;                   // Error message if request failed
  CodeMetadata code_metadata = 3;     // Code metadata from FetchEnv
  DeploymentCert deployment_cert = 4; // Generated deployment certificate
  string otlp_token = 5;              // OpenTelemetry token for metrics
  string auth_token = 6;              // Authentication token
}
