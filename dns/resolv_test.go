package dns

import (
	"os"
	"path/filepath"
	"strings"
	"testing"
)

func TestWriteResolvConf(t *testing.T) {
	// Create a temporary directory for test files
	tmpDir := t.TempDir()

	tests := []struct {
		name     string
		filename string
		wantErr  bool
	}{
		{
			name:     "write to custom file",
			filename: filepath.Join(tmpDir, "resolv.conf"),
			wantErr:  false,
		},
		{
			name:     "write to nested directory",
			filename: filepath.Join(tmpDir, "etc", "resolv.conf"),
			wantErr:  true, // Directory doesn't exist
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := WriteResolvConf(tt.filename)
			if (err != nil) != tt.wantErr {
				t.Errorf("WriteResolvConf() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if !tt.wantErr {
				// Read the file and verify contents
				content, err := os.ReadFile(tt.filename)
				if err != nil {
					t.Fatalf("Failed to read written file: %v", err)
				}

				contentStr := string(content)

				// Verify it contains the nameserver line
				if !strings.Contains(contentStr, "nameserver 127.0.0.1") {
					t.Error("resolv.conf does not contain 'nameserver 127.0.0.1'")
				}

				// Verify it contains the search domain
				expectedSearch := "search " + DefaultInternalDomain
				if !strings.Contains(contentStr, expectedSearch) {
					t.Errorf("resolv.conf does not contain '%s'", expectedSearch)
				}

				// Verify it contains the comment
				if !strings.Contains(contentStr, "# Generated by agentuity/go-common/dns") {
					t.Error("resolv.conf does not contain generation comment")
				}
			}
		})
	}
}

func TestWriteResolvConf_DefaultPath(t *testing.T) {
	// We can't actually write to /etc/resolv.conf in tests,
	// but we can test that the default path is used by passing empty string
	// This test just ensures the function doesn't panic with empty filename

	// Create a temporary directory and change to it
	tmpDir := t.TempDir()
	testFile := filepath.Join(tmpDir, "test-resolv.conf")

	// Call with non-empty filename to avoid actual /etc/resolv.conf
	err := WriteResolvConf(testFile)
	if err != nil {
		t.Fatalf("WriteResolvConf() with custom path failed: %v", err)
	}

	// Verify the file was created
	if _, err := os.Stat(testFile); os.IsNotExist(err) {
		t.Error("resolv.conf file was not created")
	}
}

func TestWriteResolvConf_Content(t *testing.T) {
	tmpDir := t.TempDir()
	testFile := filepath.Join(tmpDir, "resolv.conf")

	err := WriteResolvConf(testFile)
	if err != nil {
		t.Fatalf("WriteResolvConf() failed: %v", err)
	}

	// Read and parse the file
	content, err := os.ReadFile(testFile)
	if err != nil {
		t.Fatalf("Failed to read written file: %v", err)
	}

	lines := strings.Split(string(content), "\n")

	// Track what we found
	foundComment := false
	foundNameserver := false
	foundSearch := false

	for _, line := range lines {
		line = strings.TrimSpace(line)
		if strings.HasPrefix(line, "#") {
			foundComment = true
		}
		if strings.HasPrefix(line, "nameserver 127.0.0.1") {
			foundNameserver = true
		}
		if strings.HasPrefix(line, "search "+DefaultInternalDomain) {
			foundSearch = true
		}
	}

	if !foundComment {
		t.Error("resolv.conf missing comment header")
	}
	if !foundNameserver {
		t.Error("resolv.conf missing nameserver line")
	}
	if !foundSearch {
		t.Error("resolv.conf missing search line")
	}
}

func TestWriteResolvConf_FilePermissions(t *testing.T) {
	tmpDir := t.TempDir()
	testFile := filepath.Join(tmpDir, "resolv.conf")

	err := WriteResolvConf(testFile)
	if err != nil {
		t.Fatalf("WriteResolvConf() failed: %v", err)
	}

	// Check file permissions
	info, err := os.Stat(testFile)
	if err != nil {
		t.Fatalf("Failed to stat file: %v", err)
	}

	mode := info.Mode().Perm()
	expectedMode := os.FileMode(0644)

	if mode != expectedMode {
		t.Errorf("File permissions = %o, want %o", mode, expectedMode)
	}
}
