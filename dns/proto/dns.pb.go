// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: dns.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// TTL in seconds (converted from time.Duration)
	TtlSeconds int64 `protobuf:"varint,4,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"`
	// Expires in seconds (converted from time.Duration)
	ExpiresSeconds int64 `protobuf:"varint,5,opt,name=expires_seconds,json=expiresSeconds,proto3" json:"expires_seconds,omitempty"`
	// Priority for MX and SRV records
	Priority int32 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	// Weight for SRV records
	Weight int32 `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	// Port for SRV records
	Port          int32 `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRequest) Reset() {
	*x = AddRequest{}
	mi := &file_dns_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequest) ProtoMessage() {}

func (x *AddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRequest.ProtoReflect.Descriptor instead.
func (*AddRequest) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{0}
}

func (x *AddRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AddRequest) GetTtlSeconds() int64 {
	if x != nil {
		return x.TtlSeconds
	}
	return 0
}

func (x *AddRequest) GetExpiresSeconds() int64 {
	if x != nil {
		return x.ExpiresSeconds
	}
	return 0
}

func (x *AddRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *AddRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *AddRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type AddResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Id            string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddResponse) Reset() {
	*x = AddResponse{}
	mi := &file_dns_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResponse) ProtoMessage() {}

func (x *AddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResponse.ProtoReflect.Descriptor instead.
func (*AddResponse) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{1}
}

func (x *AddResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *AddResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ids           []string               `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	mi := &file_dns_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	mi := &file_dns_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CertRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertRequest) Reset() {
	*x = CertRequest{}
	mi := &file_dns_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertRequest) ProtoMessage() {}

func (x *CertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertRequest.ProtoReflect.Descriptor instead.
func (*CertRequest) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{4}
}

func (x *CertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CertResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Certificate   []byte                 `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
	PrivateKey    []byte                 `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Expires       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expires,proto3" json:"expires,omitempty"`
	Domain        string                 `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertResponse) Reset() {
	*x = CertResponse{}
	mi := &file_dns_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertResponse) ProtoMessage() {}

func (x *CertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertResponse.ProtoReflect.Descriptor instead.
func (*CertResponse) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{5}
}

func (x *CertResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CertResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CertResponse) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *CertResponse) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *CertResponse) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *CertResponse) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

var File_dns_proto protoreflect.FileDescriptor

const file_dns_proto_rawDesc = "" +
	"\n" +
	"\tdns.proto\x12\x03dns\x1a\x1fgoogle/protobuf/timestamp.proto\"\xdc\x01\n" +
	"\n" +
	"AddRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\x12\x1f\n" +
	"\vttl_seconds\x18\x04 \x01(\x03R\n" +
	"ttlSeconds\x12'\n" +
	"\x0fexpires_seconds\x18\x05 \x01(\x03R\x0eexpiresSeconds\x12\x1a\n" +
	"\bpriority\x18\x06 \x01(\x05R\bpriority\x12\x16\n" +
	"\x06weight\x18\a \x01(\x05R\x06weight\x12\x12\n" +
	"\x04port\x18\b \x01(\x05R\x04port\"M\n" +
	"\vAddResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\tR\x02id\"5\n" +
	"\rDeleteRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x10\n" +
	"\x03ids\x18\x02 \x03(\tR\x03ids\"@\n" +
	"\x0eDeleteResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"!\n" +
	"\vCertRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\xcf\x01\n" +
	"\fCertResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12 \n" +
	"\vcertificate\x18\x03 \x01(\fR\vcertificate\x12\x1f\n" +
	"\vprivate_key\x18\x04 \x01(\fR\n" +
	"privateKey\x124\n" +
	"\aexpires\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\aexpires\x12\x16\n" +
	"\x06domain\x18\x06 \x01(\tR\x06domain2\x9d\x01\n" +
	"\n" +
	"DNSService\x12(\n" +
	"\x03Add\x12\x0f.dns.AddRequest\x1a\x10.dns.AddResponse\x121\n" +
	"\x06Delete\x12\x12.dns.DeleteRequest\x1a\x13.dns.DeleteResponse\x122\n" +
	"\vRequestCert\x12\x10.dns.CertRequest\x1a\x11.dns.CertResponseB*Z(github.com/agentuity/go-common/dns/protob\x06proto3"

var (
	file_dns_proto_rawDescOnce sync.Once
	file_dns_proto_rawDescData []byte
)

func file_dns_proto_rawDescGZIP() []byte {
	file_dns_proto_rawDescOnce.Do(func() {
		file_dns_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dns_proto_rawDesc), len(file_dns_proto_rawDesc)))
	})
	return file_dns_proto_rawDescData
}

var file_dns_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_dns_proto_goTypes = []any{
	(*AddRequest)(nil),            // 0: dns.AddRequest
	(*AddResponse)(nil),           // 1: dns.AddResponse
	(*DeleteRequest)(nil),         // 2: dns.DeleteRequest
	(*DeleteResponse)(nil),        // 3: dns.DeleteResponse
	(*CertRequest)(nil),           // 4: dns.CertRequest
	(*CertResponse)(nil),          // 5: dns.CertResponse
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_dns_proto_depIdxs = []int32{
	6, // 0: dns.CertResponse.expires:type_name -> google.protobuf.Timestamp
	0, // 1: dns.DNSService.Add:input_type -> dns.AddRequest
	2, // 2: dns.DNSService.Delete:input_type -> dns.DeleteRequest
	4, // 3: dns.DNSService.RequestCert:input_type -> dns.CertRequest
	1, // 4: dns.DNSService.Add:output_type -> dns.AddResponse
	3, // 5: dns.DNSService.Delete:output_type -> dns.DeleteResponse
	5, // 6: dns.DNSService.RequestCert:output_type -> dns.CertResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_dns_proto_init() }
func file_dns_proto_init() {
	if File_dns_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dns_proto_rawDesc), len(file_dns_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dns_proto_goTypes,
		DependencyIndexes: file_dns_proto_depIdxs,
		MessageInfos:      file_dns_proto_msgTypes,
	}.Build()
	File_dns_proto = out.File
	file_dns_proto_goTypes = nil
	file_dns_proto_depIdxs = nil
}
